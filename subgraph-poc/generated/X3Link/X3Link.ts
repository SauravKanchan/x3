// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LinkCreated extends ethereum.Event {
  get params(): LinkCreated__Params {
    return new LinkCreated__Params(this);
  }
}

export class LinkCreated__Params {
  _event: LinkCreated;

  constructor(event: LinkCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ipfs_hash(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class X3Link__getLinkResult {
  value0: Address;
  value1: string;

  constructor(value0: Address, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): string {
    return this.value1;
  }
}

export class X3Link extends ethereum.SmartContract {
  static bind(address: Address): X3Link {
    return new X3Link("X3Link", address);
  }

  createLink(_ipfs_hash: string): BigInt {
    let result = super.call("createLink", "createLink(string):(uint256)", [
      ethereum.Value.fromString(_ipfs_hash)
    ]);

    return result[0].toBigInt();
  }

  try_createLink(_ipfs_hash: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createLink", "createLink(string):(uint256)", [
      ethereum.Value.fromString(_ipfs_hash)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLink(_id: BigInt): X3Link__getLinkResult {
    let result = super.call("getLink", "getLink(uint256):(address,string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return new X3Link__getLinkResult(
      result[0].toAddress(),
      result[1].toString()
    );
  }

  try_getLink(_id: BigInt): ethereum.CallResult<X3Link__getLinkResult> {
    let result = super.tryCall("getLink", "getLink(uint256):(address,string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new X3Link__getLinkResult(value[0].toAddress(), value[1].toString())
    );
  }

  isPayable(): boolean {
    let result = super.call("isPayable", "isPayable():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPayable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPayable", "isPayable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  linkCount(): BigInt {
    let result = super.call("linkCount", "linkCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_linkCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("linkCount", "linkCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get eas(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get intialAttestors(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AttestCall extends ethereum.Call {
  get inputs(): AttestCall__Inputs {
    return new AttestCall__Inputs(this);
  }

  get outputs(): AttestCall__Outputs {
    return new AttestCall__Outputs(this);
  }
}

export class AttestCall__Inputs {
  _call: AttestCall;

  constructor(call: AttestCall) {
    this._call = call;
  }

  get attestation(): AttestCallAttestationStruct {
    return changetype<AttestCallAttestationStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AttestCall__Outputs {
  _call: AttestCall;

  constructor(call: AttestCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AttestCallAttestationStruct extends ethereum.Tuple {
  get uid(): Bytes {
    return this[0].toBytes();
  }

  get schema(): Bytes {
    return this[1].toBytes();
  }

  get time(): BigInt {
    return this[2].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[3].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[4].toBigInt();
  }

  get refUID(): Bytes {
    return this[5].toBytes();
  }

  get recipient(): Address {
    return this[6].toAddress();
  }

  get attester(): Address {
    return this[7].toAddress();
  }

  get revocable(): boolean {
    return this[8].toBoolean();
  }

  get data(): Bytes {
    return this[9].toBytes();
  }
}

export class ChangeIpfsHashCall extends ethereum.Call {
  get inputs(): ChangeIpfsHashCall__Inputs {
    return new ChangeIpfsHashCall__Inputs(this);
  }

  get outputs(): ChangeIpfsHashCall__Outputs {
    return new ChangeIpfsHashCall__Outputs(this);
  }
}

export class ChangeIpfsHashCall__Inputs {
  _call: ChangeIpfsHashCall;

  constructor(call: ChangeIpfsHashCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ipfs_hash(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeIpfsHashCall__Outputs {
  _call: ChangeIpfsHashCall;

  constructor(call: ChangeIpfsHashCall) {
    this._call = call;
  }
}

export class CreateLinkCall extends ethereum.Call {
  get inputs(): CreateLinkCall__Inputs {
    return new CreateLinkCall__Inputs(this);
  }

  get outputs(): CreateLinkCall__Outputs {
    return new CreateLinkCall__Outputs(this);
  }
}

export class CreateLinkCall__Inputs {
  _call: CreateLinkCall;

  constructor(call: CreateLinkCall) {
    this._call = call;
  }

  get _ipfs_hash(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateLinkCall__Outputs {
  _call: CreateLinkCall;

  constructor(call: CreateLinkCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MultiAttestCall extends ethereum.Call {
  get inputs(): MultiAttestCall__Inputs {
    return new MultiAttestCall__Inputs(this);
  }

  get outputs(): MultiAttestCall__Outputs {
    return new MultiAttestCall__Outputs(this);
  }
}

export class MultiAttestCall__Inputs {
  _call: MultiAttestCall;

  constructor(call: MultiAttestCall) {
    this._call = call;
  }

  get attestations(): Array<MultiAttestCallAttestationsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MultiAttestCallAttestationsStruct
    >();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MultiAttestCall__Outputs {
  _call: MultiAttestCall;

  constructor(call: MultiAttestCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MultiAttestCallAttestationsStruct extends ethereum.Tuple {
  get uid(): Bytes {
    return this[0].toBytes();
  }

  get schema(): Bytes {
    return this[1].toBytes();
  }

  get time(): BigInt {
    return this[2].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[3].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[4].toBigInt();
  }

  get refUID(): Bytes {
    return this[5].toBytes();
  }

  get recipient(): Address {
    return this[6].toAddress();
  }

  get attester(): Address {
    return this[7].toAddress();
  }

  get revocable(): boolean {
    return this[8].toBoolean();
  }

  get data(): Bytes {
    return this[9].toBytes();
  }
}

export class MultiRevokeCall extends ethereum.Call {
  get inputs(): MultiRevokeCall__Inputs {
    return new MultiRevokeCall__Inputs(this);
  }

  get outputs(): MultiRevokeCall__Outputs {
    return new MultiRevokeCall__Outputs(this);
  }
}

export class MultiRevokeCall__Inputs {
  _call: MultiRevokeCall;

  constructor(call: MultiRevokeCall) {
    this._call = call;
  }

  get attestations(): Array<MultiRevokeCallAttestationsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MultiRevokeCallAttestationsStruct
    >();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MultiRevokeCall__Outputs {
  _call: MultiRevokeCall;

  constructor(call: MultiRevokeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MultiRevokeCallAttestationsStruct extends ethereum.Tuple {
  get uid(): Bytes {
    return this[0].toBytes();
  }

  get schema(): Bytes {
    return this[1].toBytes();
  }

  get time(): BigInt {
    return this[2].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[3].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[4].toBigInt();
  }

  get refUID(): Bytes {
    return this[5].toBytes();
  }

  get recipient(): Address {
    return this[6].toAddress();
  }

  get attester(): Address {
    return this[7].toAddress();
  }

  get revocable(): boolean {
    return this[8].toBoolean();
  }

  get data(): Bytes {
    return this[9].toBytes();
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get attestation(): RevokeCallAttestationStruct {
    return changetype<RevokeCallAttestationStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RevokeCallAttestationStruct extends ethereum.Tuple {
  get uid(): Bytes {
    return this[0].toBytes();
  }

  get schema(): Bytes {
    return this[1].toBytes();
  }

  get time(): BigInt {
    return this[2].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[3].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[4].toBigInt();
  }

  get refUID(): Bytes {
    return this[5].toBytes();
  }

  get recipient(): Address {
    return this[6].toAddress();
  }

  get attester(): Address {
    return this[7].toAddress();
  }

  get revocable(): boolean {
    return this[8].toBoolean();
  }

  get data(): Bytes {
    return this[9].toBytes();
  }
}

export class VoteAttesterCall extends ethereum.Call {
  get inputs(): VoteAttesterCall__Inputs {
    return new VoteAttesterCall__Inputs(this);
  }

  get outputs(): VoteAttesterCall__Outputs {
    return new VoteAttesterCall__Outputs(this);
  }
}

export class VoteAttesterCall__Inputs {
  _call: VoteAttesterCall;

  constructor(call: VoteAttesterCall) {
    this._call = call;
  }

  get attester(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class VoteAttesterCall__Outputs {
  _call: VoteAttesterCall;

  constructor(call: VoteAttesterCall) {
    this._call = call;
  }
}
